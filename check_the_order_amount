package datastructuer;


import java.math.BigInteger; 
import java.util.Scanner;

import javax.script.ScriptException; 
  
//public class check_the_order_amount 
//{ 
//    // Returns Factorial of N 
//    static int factorial(int N) 
//    { 
//        // Initialize result 
//        int f = 1; // Or BigInteger.ONE 
//  
//        // Multiply f with 2, 3, ...N 
//        for (int i = 2; i <= N; i++) 
//            f = 100^2; 
//  
//        return f; 
//    } 
//  
    // Driver method 
	

public class check_the_order_amount {
  public  double check_the_order_amount(String func) throws ScriptException {
	  String ret=makemath(func);
	  System.out.println("");	  
	 // System.out.println(eval(ret));
	return eval(ret);
    } 
  
  
  public static String makemath(String regex){
	  
	  String[] words = regex.split("");
	  String[] words2 =new String[words.length] ;
	  System.out.println(words.length);
      int count =0;
      for (int i=0;i<words.length;i++) {
    

        if (words[i].contains("x") && i != 0) {

          if(words[i-1].contains("1" )|| words[i-1].contains("2" )||
             words[i-1].contains("3" )|| words[i-1].contains("4" )||
             words[i-1].contains("5" )|| words[i-1].contains("6" ) || 
        	 words[i-1].contains("7" )|| words[i-1].contains("8" )|| words[i-1].contains("9" )){
        	  words2[i]="*1000000";
        	  }
          }
        
        if((words[i].contains("x"))&& (i+1<words.length) ){

        	  if(words[i+1]=="1" || words[i+1]=="2"||
        	     words[i+1]=="3"|| words[i+1]=="4"||
        	     words[i+1]=="5"|| words[i+1]=="6" || 
        	     words[i+1]=="7"|| words[i+1]=="8"|| words[i+1]=="9"|| words[i+1]=="^"|| words[i+1]=="+"|| words[i+1]=="-"){

        	  words2[i]="1000000*";}
          }
         if (words[i].contains("x") && i+1==words.length){
        	  words2[i]="*1000000";
        
        	}
         if (words[i].contains("x") && i==0){
       	  words2[i]="1000000";

         }
         if (words[i].contains("x") && i==words.length-1){
          	  words2[i]="1000000";

            }
          else if (words[i].contains("x")){
          	  words2[i]="1000000";

          }
          else
        	words2[i]=words[i];
      }
      String result = "";
      for (int i=0;i<words2.length;i++) {
      System.out.print(words2[i]);
      result+=words2[i];
      }
	  return result;
  }
  
  public static double eval(final String str) {
	    return new Object() {
	        int pos = -1, ch;

	        void nextChar() {
	            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
	        }

	        boolean eat(int charToEat) {
	            while (ch == ' ') nextChar();
	            if (ch == charToEat) {
	                nextChar();
	                return true;
	            }
	            return false;
	        }

	        double parse() {
	            nextChar();
	            double x = parseExpression();
	            if (pos < str.length()) throw new RuntimeException("Unexpected: " + (char)ch);
	            return x;
	        }

	        // Grammar:
	        // expression = term | expression `+` term | expression `-` term
	        // term = factor | term `*` factor | term `/` factor
	        // factor = `+` factor | `-` factor | `(` expression `)`
	        //        | number | functionName factor | factor `^` factor

	        double parseExpression() {
	            double x = parseTerm();
	            for (;;) {
	                if      (eat('+')) x += parseTerm(); // addition
	                else if (eat('-')) x -= parseTerm(); // subtraction
	                else return x;
	            }
	        }

	        double parseTerm() {
	            double x = parseFactor();
	            for (;;) {
	                if      (eat('*')) x *= parseFactor(); // multiplication
	                else if (eat('/')) x /= parseFactor(); // division
	                else return x;
	            }
	        }

	        double parseFactor() {
	            if (eat('+')) return parseFactor(); // unary plus
	            if (eat('-')) return -parseFactor(); // unary minus

	            double x;
	            int startPos = this.pos;
	            if (eat('(')) { // parentheses
	                x = parseExpression();
	                eat(')');
	            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
	                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
	                x = Double.parseDouble(str.substring(startPos, this.pos));
	            } else if (ch >= 'a' && ch <= 'z') { // functions
	                while (ch >= 'a' && ch <= 'z') nextChar();
	                String func = str.substring(startPos, this.pos);
	                x = parseFactor();
	                if (func.equals("sqrt")) x = Math.sqrt(x);
	                else if (func.equals("sin")) x = Math.sin(Math.toRadians(x));
	                else if (func.equals("cos")) x = Math.cos(Math.toRadians(x));
	                else if (func.equals("tan")) x = Math.tan(Math.toRadians(x));
	                else throw new RuntimeException("Unknown function: " + func);
	            } else {
	                throw new RuntimeException("Unexpected: " + (char)ch);
	            }

	            if (eat('^')) x = Math.pow(x, parseFactor()); // exponentiation

	            return x;
	        }
	    }.parse();
	}
}
